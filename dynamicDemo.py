# coding:GB2312
# 引用和对象分离
# ============
# 即使是多个引用指向同一个对象，如果一个引用值发生变化，那么实际上是让这个引用指向一个新的引用，并不影响其他的引用的指向。

# a = 5
# b = a
# a = a + 2
# print b
# ==================
# L1 = [1,2,3]
# L2 = L1
# L1[0] = 10
# print L2
# 因为L1，L2的指向没有发生变化，依然指向那个表。表实际上是包含了多个引用的对象（每个引用是一个元素，比如L1[0]，L1[1]..., 每个引用指向一个对象，比如1,2,3), 。而L1[0] = 10这一赋值操作，并不是改变L1的指向，而是对L1[0], 也就是表对象的一部份(一个元素)，进行操作，所以所有指向该对象的引用都受到影响。
# （与之形成对比的是，我们之前的赋值操作都没有对对象自身发生作用，只是改变引用指向。）
# =============

# 从动态类型看函数的参数传递
def f(x):
    x = 100
    print x

a = 1
f(a)
print a

def g(x):
    x[0] = 100
    print x

b = [1,2,3]
g(b)
print b